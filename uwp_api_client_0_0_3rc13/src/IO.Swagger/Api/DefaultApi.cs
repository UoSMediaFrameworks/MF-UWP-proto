/* 
 * uos-mf-api-controller
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// As a client, get a valid session token for the API
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creds">A password key</param>
        /// <returns>SessionResult</returns>
        SessionResult AuthTokenGetPost (Password creds);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// As a client, get a valid session token for the API
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creds">A password key</param>
        /// <returns>ApiResponse of SessionResult</returns>
        ApiResponse<SessionResult> AuthTokenGetPostWithHttpInfo (Password creds);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// When a client begins transitioning a piece of media
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">a schemaless data object from an IoT device</param>
        /// <returns>ApiAck</returns>
        ApiAck PlaybackIotDataPost (Data data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// When a client begins transitioning a piece of media
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">a schemaless data object from an IoT device</param>
        /// <returns>ApiResponse of ApiAck</returns>
        ApiResponse<ApiAck> PlaybackIotDataPostWithHttpInfo (Data data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// When a client begins transitioning a piece of media
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finished">the media object finished by a client</param>
        /// <returns>ApiAck</returns>
        ApiAck PlaybackMediaDonePost (MediaCommand finished);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// When a client begins transitioning a piece of media
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finished">the media object finished by a client</param>
        /// <returns>ApiResponse of ApiAck</returns>
        ApiResponse<ApiAck> PlaybackMediaDonePostWithHttpInfo (MediaCommand finished);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Playback media
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiAck</returns>
        ApiAck PlaybackMediaShowPost (MediaCommand play);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Playback media
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiResponse of ApiAck</returns>
        ApiResponse<ApiAck> PlaybackMediaShowPostWithHttpInfo (MediaCommand play);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// When a client begins transitioning a piece of media
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitioning">the media object being transitioned by a client</param>
        /// <returns>ApiAck</returns>
        ApiAck PlaybackMediaTransitioningPost (MediaCommand transitioning);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// When a client begins transitioning a piece of media
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitioning">the media object being transitioned by a client</param>
        /// <returns>ApiResponse of ApiAck</returns>
        ApiResponse<ApiAck> PlaybackMediaTransitioningPostWithHttpInfo (MediaCommand transitioning);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Show scene
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiAck</returns>
        ApiAck PlaybackSceneShowPost (PlayScene play);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Show scene
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiResponse of ApiAck</returns>
        ApiResponse<ApiAck> PlaybackSceneShowPostWithHttpInfo (PlayScene play);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Show scene theme
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiAck</returns>
        ApiAck PlaybackSceneThemeShowPost (PlaySceneTheme play);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Show scene theme
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiResponse of ApiAck</returns>
        ApiResponse<ApiAck> PlaybackSceneThemeShowPostWithHttpInfo (PlaySceneTheme play);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Show scenes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiAck</returns>
        ApiAck PlaybackScenesShowPost (PlayScenes play);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Show scenes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiResponse of ApiAck</returns>
        ApiResponse<ApiAck> PlaybackScenesShowPostWithHttpInfo (PlayScenes play);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of every unique permutations of SceneTheme from a bucket of Scenes and Themes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>SceneThemes</returns>
        SceneThemes PlaybackScenesThemesPermutationsGet (Play play);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of every unique permutations of SceneTheme from a bucket of Scenes and Themes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiResponse of SceneThemes</returns>
        ApiResponse<SceneThemes> PlaybackScenesThemesPermutationsGetWithHttpInfo (Play play);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Playback scene and theme combinations from the provided scenes and themes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiAck</returns>
        ApiAck PlaybackScenesThemesShowPost (Play play);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Playback scene and theme combinations from the provided scenes and themes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiResponse of ApiAck</returns>
        ApiResponse<ApiAck> PlaybackScenesThemesShowPostWithHttpInfo (Play play);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set a tag matcher
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matcher">A tag matcher update request</param>
        /// <returns>ApiAck</returns>
        ApiAck PlaybackTagMatcherSetPost (SetTagMatcher matcher);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set a tag matcher
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matcher">A tag matcher update request</param>
        /// <returns>ApiResponse of ApiAck</returns>
        ApiResponse<ApiAck> PlaybackTagMatcherSetPostWithHttpInfo (SetTagMatcher matcher);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Show theme
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiAck</returns>
        ApiAck PlaybackThemeShowPost (PlayTheme play);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Show theme
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiResponse of ApiAck</returns>
        ApiResponse<ApiAck> PlaybackThemeShowPostWithHttpInfo (PlayTheme play);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a media scene.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sceneName">A scene name</param>
        /// <returns>MediaSceneSchema</returns>
        MediaSceneSchema SceneFindByNameGet (string sceneName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a media scene.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sceneName">A scene name</param>
        /// <returns>ApiResponse of MediaSceneSchema</returns>
        ApiResponse<MediaSceneSchema> SceneFindByNameGetWithHttpInfo (string sceneName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a media scene with any uploaded media object full database details appended.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sceneId">A scene id</param>
        /// <returns>MediaSceneSchema</returns>
        MediaSceneSchema SceneFullGet (string sceneId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a media scene with any uploaded media object full database details appended.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sceneId">A scene id</param>
        /// <returns>ApiResponse of MediaSceneSchema</returns>
        ApiResponse<MediaSceneSchema> SceneFullGetWithHttpInfo (string sceneId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of media scenes (_id, names and _groupID)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SceneList</returns>
        SceneList SceneListGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of media scenes (_id, names and _groupID)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SceneList</returns>
        ApiResponse<SceneList> SceneListGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// As a client, get a valid session token for the API
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creds">A password key</param>
        /// <returns>Task of SessionResult</returns>
        System.Threading.Tasks.Task<SessionResult> AuthTokenGetPostAsync (Password creds);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// As a client, get a valid session token for the API
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creds">A password key</param>
        /// <returns>Task of ApiResponse (SessionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionResult>> AuthTokenGetPostAsyncWithHttpInfo (Password creds);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// When a client begins transitioning a piece of media
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">a schemaless data object from an IoT device</param>
        /// <returns>Task of ApiAck</returns>
        System.Threading.Tasks.Task<ApiAck> PlaybackIotDataPostAsync (Data data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// When a client begins transitioning a piece of media
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">a schemaless data object from an IoT device</param>
        /// <returns>Task of ApiResponse (ApiAck)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiAck>> PlaybackIotDataPostAsyncWithHttpInfo (Data data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// When a client begins transitioning a piece of media
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finished">the media object finished by a client</param>
        /// <returns>Task of ApiAck</returns>
        System.Threading.Tasks.Task<ApiAck> PlaybackMediaDonePostAsync (MediaCommand finished);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// When a client begins transitioning a piece of media
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finished">the media object finished by a client</param>
        /// <returns>Task of ApiResponse (ApiAck)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiAck>> PlaybackMediaDonePostAsyncWithHttpInfo (MediaCommand finished);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Playback media
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiAck</returns>
        System.Threading.Tasks.Task<ApiAck> PlaybackMediaShowPostAsync (MediaCommand play);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Playback media
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiResponse (ApiAck)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiAck>> PlaybackMediaShowPostAsyncWithHttpInfo (MediaCommand play);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// When a client begins transitioning a piece of media
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitioning">the media object being transitioned by a client</param>
        /// <returns>Task of ApiAck</returns>
        System.Threading.Tasks.Task<ApiAck> PlaybackMediaTransitioningPostAsync (MediaCommand transitioning);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// When a client begins transitioning a piece of media
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitioning">the media object being transitioned by a client</param>
        /// <returns>Task of ApiResponse (ApiAck)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiAck>> PlaybackMediaTransitioningPostAsyncWithHttpInfo (MediaCommand transitioning);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Show scene
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiAck</returns>
        System.Threading.Tasks.Task<ApiAck> PlaybackSceneShowPostAsync (PlayScene play);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Show scene
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiResponse (ApiAck)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiAck>> PlaybackSceneShowPostAsyncWithHttpInfo (PlayScene play);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Show scene theme
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiAck</returns>
        System.Threading.Tasks.Task<ApiAck> PlaybackSceneThemeShowPostAsync (PlaySceneTheme play);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Show scene theme
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiResponse (ApiAck)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiAck>> PlaybackSceneThemeShowPostAsyncWithHttpInfo (PlaySceneTheme play);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Show scenes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiAck</returns>
        System.Threading.Tasks.Task<ApiAck> PlaybackScenesShowPostAsync (PlayScenes play);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Show scenes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiResponse (ApiAck)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiAck>> PlaybackScenesShowPostAsyncWithHttpInfo (PlayScenes play);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of every unique permutations of SceneTheme from a bucket of Scenes and Themes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of SceneThemes</returns>
        System.Threading.Tasks.Task<SceneThemes> PlaybackScenesThemesPermutationsGetAsync (Play play);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of every unique permutations of SceneTheme from a bucket of Scenes and Themes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiResponse (SceneThemes)</returns>
        System.Threading.Tasks.Task<ApiResponse<SceneThemes>> PlaybackScenesThemesPermutationsGetAsyncWithHttpInfo (Play play);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Playback scene and theme combinations from the provided scenes and themes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiAck</returns>
        System.Threading.Tasks.Task<ApiAck> PlaybackScenesThemesShowPostAsync (Play play);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Playback scene and theme combinations from the provided scenes and themes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiResponse (ApiAck)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiAck>> PlaybackScenesThemesShowPostAsyncWithHttpInfo (Play play);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set a tag matcher
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matcher">A tag matcher update request</param>
        /// <returns>Task of ApiAck</returns>
        System.Threading.Tasks.Task<ApiAck> PlaybackTagMatcherSetPostAsync (SetTagMatcher matcher);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set a tag matcher
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matcher">A tag matcher update request</param>
        /// <returns>Task of ApiResponse (ApiAck)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiAck>> PlaybackTagMatcherSetPostAsyncWithHttpInfo (SetTagMatcher matcher);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Show theme
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiAck</returns>
        System.Threading.Tasks.Task<ApiAck> PlaybackThemeShowPostAsync (PlayTheme play);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Show theme
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiResponse (ApiAck)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiAck>> PlaybackThemeShowPostAsyncWithHttpInfo (PlayTheme play);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a media scene.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sceneName">A scene name</param>
        /// <returns>Task of MediaSceneSchema</returns>
        System.Threading.Tasks.Task<MediaSceneSchema> SceneFindByNameGetAsync (string sceneName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a media scene.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sceneName">A scene name</param>
        /// <returns>Task of ApiResponse (MediaSceneSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaSceneSchema>> SceneFindByNameGetAsyncWithHttpInfo (string sceneName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a media scene with any uploaded media object full database details appended.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sceneId">A scene id</param>
        /// <returns>Task of MediaSceneSchema</returns>
        System.Threading.Tasks.Task<MediaSceneSchema> SceneFullGetAsync (string sceneId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a media scene with any uploaded media object full database details appended.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sceneId">A scene id</param>
        /// <returns>Task of ApiResponse (MediaSceneSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaSceneSchema>> SceneFullGetAsyncWithHttpInfo (string sceneId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of media scenes (_id, names and _groupID)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SceneList</returns>
        System.Threading.Tasks.Task<SceneList> SceneListGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of media scenes (_id, names and _groupID)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SceneList)</returns>
        System.Threading.Tasks.Task<ApiResponse<SceneList>> SceneListGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  As a client, get a valid session token for the API
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creds">A password key</param>
        /// <returns>SessionResult</returns>
        public SessionResult AuthTokenGetPost (Password creds)
        {
             ApiResponse<SessionResult> localVarResponse = AuthTokenGetPostWithHttpInfo(creds);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  As a client, get a valid session token for the API
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creds">A password key</param>
        /// <returns>ApiResponse of SessionResult</returns>
        public ApiResponse< SessionResult > AuthTokenGetPostWithHttpInfo (Password creds)
        {
            // verify the required parameter 'creds' is set
            if (creds == null)
                throw new ApiException(400, "Missing required parameter 'creds' when calling DefaultApi->AuthTokenGetPost");

            var localVarPath = "./auth/token/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (creds != null && creds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(creds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = creds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthTokenGetPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SessionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionResult)));
        }

        /// <summary>
        ///  As a client, get a valid session token for the API
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creds">A password key</param>
        /// <returns>Task of SessionResult</returns>
        public async System.Threading.Tasks.Task<SessionResult> AuthTokenGetPostAsync (Password creds)
        {
             ApiResponse<SessionResult> localVarResponse = await AuthTokenGetPostAsyncWithHttpInfo(creds);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  As a client, get a valid session token for the API
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creds">A password key</param>
        /// <returns>Task of ApiResponse (SessionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SessionResult>> AuthTokenGetPostAsyncWithHttpInfo (Password creds)
        {
            // verify the required parameter 'creds' is set
            if (creds == null)
                throw new ApiException(400, "Missing required parameter 'creds' when calling DefaultApi->AuthTokenGetPost");

            var localVarPath = "./auth/token/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (creds != null && creds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(creds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = creds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthTokenGetPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SessionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionResult)));
        }

        /// <summary>
        ///  When a client begins transitioning a piece of media
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">a schemaless data object from an IoT device</param>
        /// <returns>ApiAck</returns>
        public ApiAck PlaybackIotDataPost (Data data)
        {
             ApiResponse<ApiAck> localVarResponse = PlaybackIotDataPostWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  When a client begins transitioning a piece of media
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">a schemaless data object from an IoT device</param>
        /// <returns>ApiResponse of ApiAck</returns>
        public ApiResponse< ApiAck > PlaybackIotDataPostWithHttpInfo (Data data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->PlaybackIotDataPost");

            var localVarPath = "./playback/iot/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaybackIotDataPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiAck>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiAck) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiAck)));
        }

        /// <summary>
        ///  When a client begins transitioning a piece of media
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">a schemaless data object from an IoT device</param>
        /// <returns>Task of ApiAck</returns>
        public async System.Threading.Tasks.Task<ApiAck> PlaybackIotDataPostAsync (Data data)
        {
             ApiResponse<ApiAck> localVarResponse = await PlaybackIotDataPostAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  When a client begins transitioning a piece of media
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">a schemaless data object from an IoT device</param>
        /// <returns>Task of ApiResponse (ApiAck)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiAck>> PlaybackIotDataPostAsyncWithHttpInfo (Data data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->PlaybackIotDataPost");

            var localVarPath = "./playback/iot/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaybackIotDataPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiAck>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiAck) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiAck)));
        }

        /// <summary>
        ///  When a client begins transitioning a piece of media
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finished">the media object finished by a client</param>
        /// <returns>ApiAck</returns>
        public ApiAck PlaybackMediaDonePost (MediaCommand finished)
        {
             ApiResponse<ApiAck> localVarResponse = PlaybackMediaDonePostWithHttpInfo(finished);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  When a client begins transitioning a piece of media
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finished">the media object finished by a client</param>
        /// <returns>ApiResponse of ApiAck</returns>
        public ApiResponse< ApiAck > PlaybackMediaDonePostWithHttpInfo (MediaCommand finished)
        {
            // verify the required parameter 'finished' is set
            if (finished == null)
                throw new ApiException(400, "Missing required parameter 'finished' when calling DefaultApi->PlaybackMediaDonePost");

            var localVarPath = "./playback/media/done";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (finished != null && finished.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(finished); // http body (model) parameter
            }
            else
            {
                localVarPostBody = finished; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaybackMediaDonePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiAck>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiAck) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiAck)));
        }

        /// <summary>
        ///  When a client begins transitioning a piece of media
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finished">the media object finished by a client</param>
        /// <returns>Task of ApiAck</returns>
        public async System.Threading.Tasks.Task<ApiAck> PlaybackMediaDonePostAsync (MediaCommand finished)
        {
             ApiResponse<ApiAck> localVarResponse = await PlaybackMediaDonePostAsyncWithHttpInfo(finished);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  When a client begins transitioning a piece of media
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finished">the media object finished by a client</param>
        /// <returns>Task of ApiResponse (ApiAck)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiAck>> PlaybackMediaDonePostAsyncWithHttpInfo (MediaCommand finished)
        {
            // verify the required parameter 'finished' is set
            if (finished == null)
                throw new ApiException(400, "Missing required parameter 'finished' when calling DefaultApi->PlaybackMediaDonePost");

            var localVarPath = "./playback/media/done";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (finished != null && finished.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(finished); // http body (model) parameter
            }
            else
            {
                localVarPostBody = finished; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaybackMediaDonePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiAck>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiAck) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiAck)));
        }

        /// <summary>
        ///  Playback media
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiAck</returns>
        public ApiAck PlaybackMediaShowPost (MediaCommand play)
        {
             ApiResponse<ApiAck> localVarResponse = PlaybackMediaShowPostWithHttpInfo(play);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Playback media
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiResponse of ApiAck</returns>
        public ApiResponse< ApiAck > PlaybackMediaShowPostWithHttpInfo (MediaCommand play)
        {
            // verify the required parameter 'play' is set
            if (play == null)
                throw new ApiException(400, "Missing required parameter 'play' when calling DefaultApi->PlaybackMediaShowPost");

            var localVarPath = "./playback/media/show";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (play != null && play.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(play); // http body (model) parameter
            }
            else
            {
                localVarPostBody = play; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaybackMediaShowPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiAck>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiAck) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiAck)));
        }

        /// <summary>
        ///  Playback media
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiAck</returns>
        public async System.Threading.Tasks.Task<ApiAck> PlaybackMediaShowPostAsync (MediaCommand play)
        {
             ApiResponse<ApiAck> localVarResponse = await PlaybackMediaShowPostAsyncWithHttpInfo(play);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Playback media
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiResponse (ApiAck)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiAck>> PlaybackMediaShowPostAsyncWithHttpInfo (MediaCommand play)
        {
            // verify the required parameter 'play' is set
            if (play == null)
                throw new ApiException(400, "Missing required parameter 'play' when calling DefaultApi->PlaybackMediaShowPost");

            var localVarPath = "./playback/media/show";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (play != null && play.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(play); // http body (model) parameter
            }
            else
            {
                localVarPostBody = play; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaybackMediaShowPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiAck>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiAck) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiAck)));
        }

        /// <summary>
        ///  When a client begins transitioning a piece of media
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitioning">the media object being transitioned by a client</param>
        /// <returns>ApiAck</returns>
        public ApiAck PlaybackMediaTransitioningPost (MediaCommand transitioning)
        {
             ApiResponse<ApiAck> localVarResponse = PlaybackMediaTransitioningPostWithHttpInfo(transitioning);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  When a client begins transitioning a piece of media
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitioning">the media object being transitioned by a client</param>
        /// <returns>ApiResponse of ApiAck</returns>
        public ApiResponse< ApiAck > PlaybackMediaTransitioningPostWithHttpInfo (MediaCommand transitioning)
        {
            // verify the required parameter 'transitioning' is set
            if (transitioning == null)
                throw new ApiException(400, "Missing required parameter 'transitioning' when calling DefaultApi->PlaybackMediaTransitioningPost");

            var localVarPath = "./playback/media/transitioning";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transitioning != null && transitioning.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(transitioning); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transitioning; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaybackMediaTransitioningPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiAck>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiAck) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiAck)));
        }

        /// <summary>
        ///  When a client begins transitioning a piece of media
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitioning">the media object being transitioned by a client</param>
        /// <returns>Task of ApiAck</returns>
        public async System.Threading.Tasks.Task<ApiAck> PlaybackMediaTransitioningPostAsync (MediaCommand transitioning)
        {
             ApiResponse<ApiAck> localVarResponse = await PlaybackMediaTransitioningPostAsyncWithHttpInfo(transitioning);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  When a client begins transitioning a piece of media
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitioning">the media object being transitioned by a client</param>
        /// <returns>Task of ApiResponse (ApiAck)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiAck>> PlaybackMediaTransitioningPostAsyncWithHttpInfo (MediaCommand transitioning)
        {
            // verify the required parameter 'transitioning' is set
            if (transitioning == null)
                throw new ApiException(400, "Missing required parameter 'transitioning' when calling DefaultApi->PlaybackMediaTransitioningPost");

            var localVarPath = "./playback/media/transitioning";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transitioning != null && transitioning.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(transitioning); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transitioning; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaybackMediaTransitioningPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiAck>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiAck) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiAck)));
        }

        /// <summary>
        ///  Show scene
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiAck</returns>
        public ApiAck PlaybackSceneShowPost (PlayScene play)
        {
             ApiResponse<ApiAck> localVarResponse = PlaybackSceneShowPostWithHttpInfo(play);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Show scene
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiResponse of ApiAck</returns>
        public ApiResponse< ApiAck > PlaybackSceneShowPostWithHttpInfo (PlayScene play)
        {
            // verify the required parameter 'play' is set
            if (play == null)
                throw new ApiException(400, "Missing required parameter 'play' when calling DefaultApi->PlaybackSceneShowPost");

            var localVarPath = "./playback/scene/show";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (play != null && play.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(play); // http body (model) parameter
            }
            else
            {
                localVarPostBody = play; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaybackSceneShowPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiAck>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiAck) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiAck)));
        }

        /// <summary>
        ///  Show scene
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiAck</returns>
        public async System.Threading.Tasks.Task<ApiAck> PlaybackSceneShowPostAsync (PlayScene play)
        {
             ApiResponse<ApiAck> localVarResponse = await PlaybackSceneShowPostAsyncWithHttpInfo(play);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Show scene
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiResponse (ApiAck)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiAck>> PlaybackSceneShowPostAsyncWithHttpInfo (PlayScene play)
        {
            // verify the required parameter 'play' is set
            if (play == null)
                throw new ApiException(400, "Missing required parameter 'play' when calling DefaultApi->PlaybackSceneShowPost");

            var localVarPath = "./playback/scene/show";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (play != null && play.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(play); // http body (model) parameter
            }
            else
            {
                localVarPostBody = play; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaybackSceneShowPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiAck>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiAck) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiAck)));
        }

        /// <summary>
        ///  Show scene theme
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiAck</returns>
        public ApiAck PlaybackSceneThemeShowPost (PlaySceneTheme play)
        {
             ApiResponse<ApiAck> localVarResponse = PlaybackSceneThemeShowPostWithHttpInfo(play);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Show scene theme
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiResponse of ApiAck</returns>
        public ApiResponse< ApiAck > PlaybackSceneThemeShowPostWithHttpInfo (PlaySceneTheme play)
        {
            // verify the required parameter 'play' is set
            if (play == null)
                throw new ApiException(400, "Missing required parameter 'play' when calling DefaultApi->PlaybackSceneThemeShowPost");

            var localVarPath = "./playback/scene/theme/show";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (play != null && play.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(play); // http body (model) parameter
            }
            else
            {
                localVarPostBody = play; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaybackSceneThemeShowPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiAck>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiAck) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiAck)));
        }

        /// <summary>
        ///  Show scene theme
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiAck</returns>
        public async System.Threading.Tasks.Task<ApiAck> PlaybackSceneThemeShowPostAsync (PlaySceneTheme play)
        {
             ApiResponse<ApiAck> localVarResponse = await PlaybackSceneThemeShowPostAsyncWithHttpInfo(play);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Show scene theme
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiResponse (ApiAck)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiAck>> PlaybackSceneThemeShowPostAsyncWithHttpInfo (PlaySceneTheme play)
        {
            // verify the required parameter 'play' is set
            if (play == null)
                throw new ApiException(400, "Missing required parameter 'play' when calling DefaultApi->PlaybackSceneThemeShowPost");

            var localVarPath = "./playback/scene/theme/show";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (play != null && play.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(play); // http body (model) parameter
            }
            else
            {
                localVarPostBody = play; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaybackSceneThemeShowPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiAck>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiAck) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiAck)));
        }

        /// <summary>
        ///  Show scenes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiAck</returns>
        public ApiAck PlaybackScenesShowPost (PlayScenes play)
        {
             ApiResponse<ApiAck> localVarResponse = PlaybackScenesShowPostWithHttpInfo(play);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Show scenes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiResponse of ApiAck</returns>
        public ApiResponse< ApiAck > PlaybackScenesShowPostWithHttpInfo (PlayScenes play)
        {
            // verify the required parameter 'play' is set
            if (play == null)
                throw new ApiException(400, "Missing required parameter 'play' when calling DefaultApi->PlaybackScenesShowPost");

            var localVarPath = "./playback/scenes/show";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (play != null && play.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(play); // http body (model) parameter
            }
            else
            {
                localVarPostBody = play; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaybackScenesShowPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiAck>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiAck) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiAck)));
        }

        /// <summary>
        ///  Show scenes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiAck</returns>
        public async System.Threading.Tasks.Task<ApiAck> PlaybackScenesShowPostAsync (PlayScenes play)
        {
             ApiResponse<ApiAck> localVarResponse = await PlaybackScenesShowPostAsyncWithHttpInfo(play);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Show scenes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiResponse (ApiAck)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiAck>> PlaybackScenesShowPostAsyncWithHttpInfo (PlayScenes play)
        {
            // verify the required parameter 'play' is set
            if (play == null)
                throw new ApiException(400, "Missing required parameter 'play' when calling DefaultApi->PlaybackScenesShowPost");

            var localVarPath = "./playback/scenes/show";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (play != null && play.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(play); // http body (model) parameter
            }
            else
            {
                localVarPostBody = play; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaybackScenesShowPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiAck>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiAck) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiAck)));
        }

        /// <summary>
        ///  Get a list of every unique permutations of SceneTheme from a bucket of Scenes and Themes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>SceneThemes</returns>
        public SceneThemes PlaybackScenesThemesPermutationsGet (Play play)
        {
             ApiResponse<SceneThemes> localVarResponse = PlaybackScenesThemesPermutationsGetWithHttpInfo(play);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of every unique permutations of SceneTheme from a bucket of Scenes and Themes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiResponse of SceneThemes</returns>
        public ApiResponse< SceneThemes > PlaybackScenesThemesPermutationsGetWithHttpInfo (Play play)
        {
            // verify the required parameter 'play' is set
            if (play == null)
                throw new ApiException(400, "Missing required parameter 'play' when calling DefaultApi->PlaybackScenesThemesPermutationsGet");

            var localVarPath = "./playback/scenes/themes/permutations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (play != null && play.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(play); // http body (model) parameter
            }
            else
            {
                localVarPostBody = play; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaybackScenesThemesPermutationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SceneThemes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SceneThemes) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SceneThemes)));
        }

        /// <summary>
        ///  Get a list of every unique permutations of SceneTheme from a bucket of Scenes and Themes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of SceneThemes</returns>
        public async System.Threading.Tasks.Task<SceneThemes> PlaybackScenesThemesPermutationsGetAsync (Play play)
        {
             ApiResponse<SceneThemes> localVarResponse = await PlaybackScenesThemesPermutationsGetAsyncWithHttpInfo(play);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a list of every unique permutations of SceneTheme from a bucket of Scenes and Themes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiResponse (SceneThemes)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SceneThemes>> PlaybackScenesThemesPermutationsGetAsyncWithHttpInfo (Play play)
        {
            // verify the required parameter 'play' is set
            if (play == null)
                throw new ApiException(400, "Missing required parameter 'play' when calling DefaultApi->PlaybackScenesThemesPermutationsGet");

            var localVarPath = "./playback/scenes/themes/permutations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (play != null && play.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(play); // http body (model) parameter
            }
            else
            {
                localVarPostBody = play; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaybackScenesThemesPermutationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SceneThemes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SceneThemes) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SceneThemes)));
        }

        /// <summary>
        ///  Playback scene and theme combinations from the provided scenes and themes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiAck</returns>
        public ApiAck PlaybackScenesThemesShowPost (Play play)
        {
             ApiResponse<ApiAck> localVarResponse = PlaybackScenesThemesShowPostWithHttpInfo(play);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Playback scene and theme combinations from the provided scenes and themes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiResponse of ApiAck</returns>
        public ApiResponse< ApiAck > PlaybackScenesThemesShowPostWithHttpInfo (Play play)
        {
            // verify the required parameter 'play' is set
            if (play == null)
                throw new ApiException(400, "Missing required parameter 'play' when calling DefaultApi->PlaybackScenesThemesShowPost");

            var localVarPath = "./playback/scenes/themes/show";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (play != null && play.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(play); // http body (model) parameter
            }
            else
            {
                localVarPostBody = play; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaybackScenesThemesShowPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiAck>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiAck) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiAck)));
        }

        /// <summary>
        ///  Playback scene and theme combinations from the provided scenes and themes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiAck</returns>
        public async System.Threading.Tasks.Task<ApiAck> PlaybackScenesThemesShowPostAsync (Play play)
        {
             ApiResponse<ApiAck> localVarResponse = await PlaybackScenesThemesShowPostAsyncWithHttpInfo(play);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Playback scene and theme combinations from the provided scenes and themes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiResponse (ApiAck)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiAck>> PlaybackScenesThemesShowPostAsyncWithHttpInfo (Play play)
        {
            // verify the required parameter 'play' is set
            if (play == null)
                throw new ApiException(400, "Missing required parameter 'play' when calling DefaultApi->PlaybackScenesThemesShowPost");

            var localVarPath = "./playback/scenes/themes/show";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (play != null && play.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(play); // http body (model) parameter
            }
            else
            {
                localVarPostBody = play; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaybackScenesThemesShowPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiAck>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiAck) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiAck)));
        }

        /// <summary>
        ///  Set a tag matcher
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matcher">A tag matcher update request</param>
        /// <returns>ApiAck</returns>
        public ApiAck PlaybackTagMatcherSetPost (SetTagMatcher matcher)
        {
             ApiResponse<ApiAck> localVarResponse = PlaybackTagMatcherSetPostWithHttpInfo(matcher);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Set a tag matcher
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matcher">A tag matcher update request</param>
        /// <returns>ApiResponse of ApiAck</returns>
        public ApiResponse< ApiAck > PlaybackTagMatcherSetPostWithHttpInfo (SetTagMatcher matcher)
        {
            // verify the required parameter 'matcher' is set
            if (matcher == null)
                throw new ApiException(400, "Missing required parameter 'matcher' when calling DefaultApi->PlaybackTagMatcherSetPost");

            var localVarPath = "./playback/tag/matcher/set";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (matcher != null && matcher.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(matcher); // http body (model) parameter
            }
            else
            {
                localVarPostBody = matcher; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaybackTagMatcherSetPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiAck>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiAck) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiAck)));
        }

        /// <summary>
        ///  Set a tag matcher
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matcher">A tag matcher update request</param>
        /// <returns>Task of ApiAck</returns>
        public async System.Threading.Tasks.Task<ApiAck> PlaybackTagMatcherSetPostAsync (SetTagMatcher matcher)
        {
             ApiResponse<ApiAck> localVarResponse = await PlaybackTagMatcherSetPostAsyncWithHttpInfo(matcher);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Set a tag matcher
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matcher">A tag matcher update request</param>
        /// <returns>Task of ApiResponse (ApiAck)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiAck>> PlaybackTagMatcherSetPostAsyncWithHttpInfo (SetTagMatcher matcher)
        {
            // verify the required parameter 'matcher' is set
            if (matcher == null)
                throw new ApiException(400, "Missing required parameter 'matcher' when calling DefaultApi->PlaybackTagMatcherSetPost");

            var localVarPath = "./playback/tag/matcher/set";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (matcher != null && matcher.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(matcher); // http body (model) parameter
            }
            else
            {
                localVarPostBody = matcher; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaybackTagMatcherSetPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiAck>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiAck) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiAck)));
        }

        /// <summary>
        ///  Show theme
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiAck</returns>
        public ApiAck PlaybackThemeShowPost (PlayTheme play)
        {
             ApiResponse<ApiAck> localVarResponse = PlaybackThemeShowPostWithHttpInfo(play);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Show theme
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>ApiResponse of ApiAck</returns>
        public ApiResponse< ApiAck > PlaybackThemeShowPostWithHttpInfo (PlayTheme play)
        {
            // verify the required parameter 'play' is set
            if (play == null)
                throw new ApiException(400, "Missing required parameter 'play' when calling DefaultApi->PlaybackThemeShowPost");

            var localVarPath = "./playback/theme/show";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (play != null && play.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(play); // http body (model) parameter
            }
            else
            {
                localVarPostBody = play; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaybackThemeShowPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiAck>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiAck) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiAck)));
        }

        /// <summary>
        ///  Show theme
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiAck</returns>
        public async System.Threading.Tasks.Task<ApiAck> PlaybackThemeShowPostAsync (PlayTheme play)
        {
             ApiResponse<ApiAck> localVarResponse = await PlaybackThemeShowPostAsyncWithHttpInfo(play);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Show theme
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="play">A play request</param>
        /// <returns>Task of ApiResponse (ApiAck)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiAck>> PlaybackThemeShowPostAsyncWithHttpInfo (PlayTheme play)
        {
            // verify the required parameter 'play' is set
            if (play == null)
                throw new ApiException(400, "Missing required parameter 'play' when calling DefaultApi->PlaybackThemeShowPost");

            var localVarPath = "./playback/theme/show";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (play != null && play.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(play); // http body (model) parameter
            }
            else
            {
                localVarPostBody = play; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaybackThemeShowPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiAck>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiAck) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiAck)));
        }

        /// <summary>
        ///  Get a media scene.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sceneName">A scene name</param>
        /// <returns>MediaSceneSchema</returns>
        public MediaSceneSchema SceneFindByNameGet (string sceneName)
        {
             ApiResponse<MediaSceneSchema> localVarResponse = SceneFindByNameGetWithHttpInfo(sceneName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a media scene.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sceneName">A scene name</param>
        /// <returns>ApiResponse of MediaSceneSchema</returns>
        public ApiResponse< MediaSceneSchema > SceneFindByNameGetWithHttpInfo (string sceneName)
        {
            // verify the required parameter 'sceneName' is set
            if (sceneName == null)
                throw new ApiException(400, "Missing required parameter 'sceneName' when calling DefaultApi->SceneFindByNameGet");

            var localVarPath = "./scene/find/by/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sceneName != null) localVarHeaderParams.Add("sceneName", Configuration.ApiClient.ParameterToString(sceneName)); // header parameter

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SceneFindByNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaSceneSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MediaSceneSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaSceneSchema)));
        }

        /// <summary>
        ///  Get a media scene.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sceneName">A scene name</param>
        /// <returns>Task of MediaSceneSchema</returns>
        public async System.Threading.Tasks.Task<MediaSceneSchema> SceneFindByNameGetAsync (string sceneName)
        {
             ApiResponse<MediaSceneSchema> localVarResponse = await SceneFindByNameGetAsyncWithHttpInfo(sceneName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a media scene.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sceneName">A scene name</param>
        /// <returns>Task of ApiResponse (MediaSceneSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaSceneSchema>> SceneFindByNameGetAsyncWithHttpInfo (string sceneName)
        {
            // verify the required parameter 'sceneName' is set
            if (sceneName == null)
                throw new ApiException(400, "Missing required parameter 'sceneName' when calling DefaultApi->SceneFindByNameGet");

            var localVarPath = "./scene/find/by/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sceneName != null) localVarHeaderParams.Add("sceneName", Configuration.ApiClient.ParameterToString(sceneName)); // header parameter

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SceneFindByNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaSceneSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MediaSceneSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaSceneSchema)));
        }

        /// <summary>
        ///  Get a media scene with any uploaded media object full database details appended.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sceneId">A scene id</param>
        /// <returns>MediaSceneSchema</returns>
        public MediaSceneSchema SceneFullGet (string sceneId)
        {
             ApiResponse<MediaSceneSchema> localVarResponse = SceneFullGetWithHttpInfo(sceneId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a media scene with any uploaded media object full database details appended.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sceneId">A scene id</param>
        /// <returns>ApiResponse of MediaSceneSchema</returns>
        public ApiResponse< MediaSceneSchema > SceneFullGetWithHttpInfo (string sceneId)
        {
            // verify the required parameter 'sceneId' is set
            if (sceneId == null)
                throw new ApiException(400, "Missing required parameter 'sceneId' when calling DefaultApi->SceneFullGet");

            var localVarPath = "./scene/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sceneId != null) localVarHeaderParams.Add("sceneId", Configuration.ApiClient.ParameterToString(sceneId)); // header parameter

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SceneFullGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaSceneSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MediaSceneSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaSceneSchema)));
        }

        /// <summary>
        ///  Get a media scene with any uploaded media object full database details appended.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sceneId">A scene id</param>
        /// <returns>Task of MediaSceneSchema</returns>
        public async System.Threading.Tasks.Task<MediaSceneSchema> SceneFullGetAsync (string sceneId)
        {
             ApiResponse<MediaSceneSchema> localVarResponse = await SceneFullGetAsyncWithHttpInfo(sceneId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a media scene with any uploaded media object full database details appended.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sceneId">A scene id</param>
        /// <returns>Task of ApiResponse (MediaSceneSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaSceneSchema>> SceneFullGetAsyncWithHttpInfo (string sceneId)
        {
            // verify the required parameter 'sceneId' is set
            if (sceneId == null)
                throw new ApiException(400, "Missing required parameter 'sceneId' when calling DefaultApi->SceneFullGet");

            var localVarPath = "./scene/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sceneId != null) localVarHeaderParams.Add("sceneId", Configuration.ApiClient.ParameterToString(sceneId)); // header parameter

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SceneFullGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaSceneSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MediaSceneSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaSceneSchema)));
        }

        /// <summary>
        ///  Get a list of media scenes (_id, names and _groupID)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SceneList</returns>
        public SceneList SceneListGet ()
        {
             ApiResponse<SceneList> localVarResponse = SceneListGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of media scenes (_id, names and _groupID)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SceneList</returns>
        public ApiResponse< SceneList > SceneListGetWithHttpInfo ()
        {

            var localVarPath = "./scene/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SceneListGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SceneList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SceneList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SceneList)));
        }

        /// <summary>
        ///  Get a list of media scenes (_id, names and _groupID)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SceneList</returns>
        public async System.Threading.Tasks.Task<SceneList> SceneListGetAsync ()
        {
             ApiResponse<SceneList> localVarResponse = await SceneListGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a list of media scenes (_id, names and _groupID)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SceneList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SceneList>> SceneListGetAsyncWithHttpInfo ()
        {

            var localVarPath = "./scene/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SceneListGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SceneList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SceneList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SceneList)));
        }

    }
}
