/* 
 * uos-mf-api-controller
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PlayScenes
    /// </summary>
    [DataContract]
    public partial class PlayScenes :  IEquatable<PlayScenes>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayScenes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PlayScenes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayScenes" /> class.
        /// </summary>
        /// <param name="RoomId">RoomId (required).</param>
        /// <param name="Scenes">Scenes.</param>
        public PlayScenes(string RoomId = default(string), List<Scene> Scenes = default(List<Scene>))
        {
            // to ensure "RoomId" is required (not null)
            if (RoomId == null)
            {
                throw new InvalidDataException("RoomId is a required property for PlayScenes and cannot be null");
            }
            else
            {
                this.RoomId = RoomId;
            }
            this.Scenes = Scenes;
        }
        
        /// <summary>
        /// Gets or Sets RoomId
        /// </summary>
        [DataMember(Name="roomId", EmitDefaultValue=false)]
        public string RoomId { get; set; }

        /// <summary>
        /// Gets or Sets Scenes
        /// </summary>
        [DataMember(Name="scenes", EmitDefaultValue=false)]
        public List<Scene> Scenes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayScenes {\n");
            sb.Append("  RoomId: ").Append(RoomId).Append("\n");
            sb.Append("  Scenes: ").Append(Scenes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PlayScenes);
        }

        /// <summary>
        /// Returns true if PlayScenes instances are equal
        /// </summary>
        /// <param name="other">Instance of PlayScenes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayScenes other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RoomId == other.RoomId ||
                    this.RoomId != null &&
                    this.RoomId.Equals(other.RoomId)
                ) && 
                (
                    this.Scenes == other.Scenes ||
                    this.Scenes != null &&
                    this.Scenes.SequenceEqual(other.Scenes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RoomId != null)
                    hash = hash * 59 + this.RoomId.GetHashCode();
                if (this.Scenes != null)
                    hash = hash * 59 + this.Scenes.GetHashCode();
                return hash;
            }
        }
    }

}
