/* 
 * uos-mf-api-controller
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Password
    /// </summary>
    [DataContract]
    public partial class Password :  IEquatable<Password>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Password" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Password() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Password" /> class.
        /// </summary>
        /// <param name="_Password">_Password (required).</param>
        public Password(string _Password = default(string))
        {
            // to ensure "_Password" is required (not null)
            if (_Password == null)
            {
                throw new InvalidDataException("_Password is a required property for Password and cannot be null");
            }
            else
            {
                this._Password = _Password;
            }
        }
        
        /// <summary>
        /// Gets or Sets _Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string _Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Password {\n");
            sb.Append("  _Password: ").Append(_Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Password);
        }

        /// <summary>
        /// Returns true if Password instances are equal
        /// </summary>
        /// <param name="other">Instance of Password to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Password other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this._Password == other._Password ||
                    this._Password != null &&
                    this._Password.Equals(other._Password)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this._Password != null)
                    hash = hash * 59 + this._Password.GetHashCode();
                return hash;
            }
        }
    }

}
