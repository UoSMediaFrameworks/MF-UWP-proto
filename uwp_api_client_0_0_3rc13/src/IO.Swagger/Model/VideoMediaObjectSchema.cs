/* 
 * uos-mf-api-controller
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// VideoMediaObjectSchema
    /// </summary>
    [DataContract]
    public partial class VideoMediaObjectSchema :  IEquatable<VideoMediaObjectSchema>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoMediaObjectSchema" /> class.
        /// </summary>
        /// <param name="Path">Path.</param>
        /// <param name="HasTranscoded">HasTranscoded.</param>
        /// <param name="Transcoder">Transcoder.</param>
        /// <param name="VimeoId">VimeoId.</param>
        /// <param name="Description">Description.</param>
        /// <param name="UploadedTimestamp">UploadedTimestamp.</param>
        /// <param name="TranscodedTimestamp">TranscodedTimestamp.</param>
        /// <param name="TranscodingStartedTimestamp">TranscodingStartedTimestamp.</param>
        /// <param name="Id">Id.</param>
        public VideoMediaObjectSchema(string Path = default(string), bool? HasTranscoded = default(bool?), decimal? Transcoder = default(decimal?), string VimeoId = default(string), string Description = default(string), string UploadedTimestamp = default(string), string TranscodedTimestamp = default(string), string TranscodingStartedTimestamp = default(string), string Id = default(string))
        {
            this.Path = Path;
            this.HasTranscoded = HasTranscoded;
            this.Transcoder = Transcoder;
            this.VimeoId = VimeoId;
            this.Description = Description;
            this.UploadedTimestamp = UploadedTimestamp;
            this.TranscodedTimestamp = TranscodedTimestamp;
            this.TranscodingStartedTimestamp = TranscodingStartedTimestamp;
            this.Id = Id;
        }
        
        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets HasTranscoded
        /// </summary>
        [DataMember(Name="hasTranscoded", EmitDefaultValue=false)]
        public bool? HasTranscoded { get; set; }

        /// <summary>
        /// Gets or Sets Transcoder
        /// </summary>
        [DataMember(Name="transcoder", EmitDefaultValue=false)]
        public decimal? Transcoder { get; set; }

        /// <summary>
        /// Gets or Sets VimeoId
        /// </summary>
        [DataMember(Name="vimeoId", EmitDefaultValue=false)]
        public string VimeoId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets UploadedTimestamp
        /// </summary>
        [DataMember(Name="uploadedTimestamp", EmitDefaultValue=false)]
        public string UploadedTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets TranscodedTimestamp
        /// </summary>
        [DataMember(Name="transcodedTimestamp", EmitDefaultValue=false)]
        public string TranscodedTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets TranscodingStartedTimestamp
        /// </summary>
        [DataMember(Name="transcodingStartedTimestamp", EmitDefaultValue=false)]
        public string TranscodingStartedTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VideoMediaObjectSchema {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  HasTranscoded: ").Append(HasTranscoded).Append("\n");
            sb.Append("  Transcoder: ").Append(Transcoder).Append("\n");
            sb.Append("  VimeoId: ").Append(VimeoId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  UploadedTimestamp: ").Append(UploadedTimestamp).Append("\n");
            sb.Append("  TranscodedTimestamp: ").Append(TranscodedTimestamp).Append("\n");
            sb.Append("  TranscodingStartedTimestamp: ").Append(TranscodingStartedTimestamp).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as VideoMediaObjectSchema);
        }

        /// <summary>
        /// Returns true if VideoMediaObjectSchema instances are equal
        /// </summary>
        /// <param name="other">Instance of VideoMediaObjectSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VideoMediaObjectSchema other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Path == other.Path ||
                    this.Path != null &&
                    this.Path.Equals(other.Path)
                ) && 
                (
                    this.HasTranscoded == other.HasTranscoded ||
                    this.HasTranscoded != null &&
                    this.HasTranscoded.Equals(other.HasTranscoded)
                ) && 
                (
                    this.Transcoder == other.Transcoder ||
                    this.Transcoder != null &&
                    this.Transcoder.Equals(other.Transcoder)
                ) && 
                (
                    this.VimeoId == other.VimeoId ||
                    this.VimeoId != null &&
                    this.VimeoId.Equals(other.VimeoId)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.UploadedTimestamp == other.UploadedTimestamp ||
                    this.UploadedTimestamp != null &&
                    this.UploadedTimestamp.Equals(other.UploadedTimestamp)
                ) && 
                (
                    this.TranscodedTimestamp == other.TranscodedTimestamp ||
                    this.TranscodedTimestamp != null &&
                    this.TranscodedTimestamp.Equals(other.TranscodedTimestamp)
                ) && 
                (
                    this.TranscodingStartedTimestamp == other.TranscodingStartedTimestamp ||
                    this.TranscodingStartedTimestamp != null &&
                    this.TranscodingStartedTimestamp.Equals(other.TranscodingStartedTimestamp)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Path != null)
                    hash = hash * 59 + this.Path.GetHashCode();
                if (this.HasTranscoded != null)
                    hash = hash * 59 + this.HasTranscoded.GetHashCode();
                if (this.Transcoder != null)
                    hash = hash * 59 + this.Transcoder.GetHashCode();
                if (this.VimeoId != null)
                    hash = hash * 59 + this.VimeoId.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.UploadedTimestamp != null)
                    hash = hash * 59 + this.UploadedTimestamp.GetHashCode();
                if (this.TranscodedTimestamp != null)
                    hash = hash * 59 + this.TranscodedTimestamp.GetHashCode();
                if (this.TranscodingStartedTimestamp != null)
                    hash = hash * 59 + this.TranscodingStartedTimestamp.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                return hash;
            }
        }
    }

}
