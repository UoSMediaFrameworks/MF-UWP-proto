/* 
 * uos-mf-api-controller
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MediaAssetSchema
    /// </summary>
    [DataContract]
    public partial class MediaAssetSchema :  IEquatable<MediaAssetSchema>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaAssetSchema" /> class.
        /// </summary>
        /// <param name="Type">Type.</param>
        /// <param name="Url">Url.</param>
        /// <param name="Autoreplay">Autoreplay.</param>
        /// <param name="Tags">Tags.</param>
        /// <param name="SequenceNumber">SequenceNumber.</param>
        /// <param name="CuePointEvents">CuePointEvents.</param>
        /// <param name="Text">Text.</param>
        /// <param name="Vmob">Vmob.</param>
        /// <param name="Imob">Imob.</param>
        /// <param name="Amob">Amob.</param>
        /// <param name="Id">Id.</param>
        public MediaAssetSchema(string Type = default(string), string Url = default(string), decimal? Autoreplay = default(decimal?), string Tags = default(string), decimal? SequenceNumber = default(decimal?), List<MediaAssetSchemaCuePointEvents> CuePointEvents = default(List<MediaAssetSchemaCuePointEvents>), string Text = default(string), VideoMediaObjectSchema Vmob = default(VideoMediaObjectSchema), ImageMediaObjectSchema Imob = default(ImageMediaObjectSchema), AudioMediaObjectSchema Amob = default(AudioMediaObjectSchema), string Id = default(string))
        {
            this.Type = Type;
            this.Url = Url;
            this.Autoreplay = Autoreplay;
            this.Tags = Tags;
            this.SequenceNumber = SequenceNumber;
            this.CuePointEvents = CuePointEvents;
            this.Text = Text;
            this.Vmob = Vmob;
            this.Imob = Imob;
            this.Amob = Amob;
            this.Id = Id;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Autoreplay
        /// </summary>
        [DataMember(Name="autoreplay", EmitDefaultValue=false)]
        public decimal? Autoreplay { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public string Tags { get; set; }

        /// <summary>
        /// Gets or Sets SequenceNumber
        /// </summary>
        [DataMember(Name="sequenceNumber", EmitDefaultValue=false)]
        public decimal? SequenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets CuePointEvents
        /// </summary>
        [DataMember(Name="cuePointEvents", EmitDefaultValue=false)]
        public List<MediaAssetSchemaCuePointEvents> CuePointEvents { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Vmob
        /// </summary>
        [DataMember(Name="vmob", EmitDefaultValue=false)]
        public VideoMediaObjectSchema Vmob { get; set; }

        /// <summary>
        /// Gets or Sets Imob
        /// </summary>
        [DataMember(Name="imob", EmitDefaultValue=false)]
        public ImageMediaObjectSchema Imob { get; set; }

        /// <summary>
        /// Gets or Sets Amob
        /// </summary>
        [DataMember(Name="amob", EmitDefaultValue=false)]
        public AudioMediaObjectSchema Amob { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaAssetSchema {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Autoreplay: ").Append(Autoreplay).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  CuePointEvents: ").Append(CuePointEvents).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Vmob: ").Append(Vmob).Append("\n");
            sb.Append("  Imob: ").Append(Imob).Append("\n");
            sb.Append("  Amob: ").Append(Amob).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as MediaAssetSchema);
        }

        /// <summary>
        /// Returns true if MediaAssetSchema instances are equal
        /// </summary>
        /// <param name="other">Instance of MediaAssetSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaAssetSchema other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                ) && 
                (
                    this.Autoreplay == other.Autoreplay ||
                    this.Autoreplay != null &&
                    this.Autoreplay.Equals(other.Autoreplay)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.Equals(other.Tags)
                ) && 
                (
                    this.SequenceNumber == other.SequenceNumber ||
                    this.SequenceNumber != null &&
                    this.SequenceNumber.Equals(other.SequenceNumber)
                ) && 
                (
                    this.CuePointEvents == other.CuePointEvents ||
                    this.CuePointEvents != null &&
                    this.CuePointEvents.SequenceEqual(other.CuePointEvents)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.Vmob == other.Vmob ||
                    this.Vmob != null &&
                    this.Vmob.Equals(other.Vmob)
                ) && 
                (
                    this.Imob == other.Imob ||
                    this.Imob != null &&
                    this.Imob.Equals(other.Imob)
                ) && 
                (
                    this.Amob == other.Amob ||
                    this.Amob != null &&
                    this.Amob.Equals(other.Amob)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                if (this.Autoreplay != null)
                    hash = hash * 59 + this.Autoreplay.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.SequenceNumber != null)
                    hash = hash * 59 + this.SequenceNumber.GetHashCode();
                if (this.CuePointEvents != null)
                    hash = hash * 59 + this.CuePointEvents.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.Vmob != null)
                    hash = hash * 59 + this.Vmob.GetHashCode();
                if (this.Imob != null)
                    hash = hash * 59 + this.Imob.GetHashCode();
                if (this.Amob != null)
                    hash = hash * 59 + this.Amob.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                return hash;
            }
        }
    }

}
